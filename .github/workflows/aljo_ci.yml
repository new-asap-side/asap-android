# This is a basic workflow to help you get started with Actions

name: Aljo CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # repository secrets 값 설정
    # ALJO -> 외부 SDK 키 값
    env:
      ALJO_LOCAL_CONTENTS: ${{ secrets.ALJO }}
      GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # JDK 17로 설정
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      # gradlew permissions 허용
      - name: Grant Permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # jks decode 추가 필요

      # secrets를 통해서 google-services.json 생성
      - name: Create google-services.json
        run: echo "$GOOGLE_SERVICES_JSON" > app/google-services.json

      # secrets를 통해서 local.properties 생성
      - name: Create local.properties
        run: |
          echo "$ALJO_LOCAL_CONTENTS" > local.properties

      # 디버그 용 APK 빌드
      - name: Build debug
        run: ./gradlew assembleDebug

      # firebase app distribution에 배포
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: Tester
          file: app/build/outputs/apk/debug/app-debug.apk
